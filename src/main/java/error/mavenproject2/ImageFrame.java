/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package error.mavenproject2;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.text.html.ImageView;

/**
 *
 * @author sudha
 */
public class ImageFrame extends javax.swing.JFrame {

    /**
     * Creates new form ImageFrame
     */
    public ImageFrame() {
        initComponents();
    
    }
    private volatile ImageIcon[] imageIcons;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathField = new javax.swing.JTextField();
        dotsBtn = new javax.swing.JButton();
        imageLbl = new javax.swing.JLabel();
        firstImage = new javax.swing.JButton();
        previousImage = new javax.swing.JButton();
        nextImage = new javax.swing.JButton();
        lastImage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathFieldActionPerformed(evt);
            }
        });

        dotsBtn.setText("...");
        dotsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotsBtnActionPerformed(evt);
            }
        });

        firstImage.setText("|<");
        firstImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstImageActionPerformed(evt);
            }
        });

        previousImage.setText("<");
        previousImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousImageActionPerformed(evt);
            }
        });

        nextImage.setText(">");
        nextImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextImageActionPerformed(evt);
            }
        });

        lastImage.setText(">|");
        lastImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dotsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstImage, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(previousImage, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nextImage, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lastImage, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(85, 85, 85))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dotsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstImage)
                    .addComponent(previousImage)
                    .addComponent(nextImage)
                    .addComponent(lastImage))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dotsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dotsBtnActionPerformed
        // TODO add your handling code here:
        pathField.setText(null);
        imageLbl.setIcon(null);
        JFileChooser imageFile = new JFileChooser();
        imageFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = imageFile.showOpenDialog(this);
        if(option == JFileChooser.APPROVE_OPTION){
            folder = imageFile.getSelectedFile();
            files = folder.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.toLowerCase().endsWith(".jpg");
                }
            });
            if(files.length > 0){
                index=0;
                imageIcons = new ImageIcon[files.length];
                String path = files[index].getPath();
                pathField.setText(path);
                if(!path.isBlank()){
                try{                                     
                    BufferedImage image = ImageIO.read(files[index]);
                    Image updateImg = image.getScaledInstance(imageLbl.getWidth(), imageLbl.getHeight(), image.SCALE_SMOOTH);
                    imageIcons[index] = new ImageIcon(updateImg);
                    imageLbl.setIcon(imageIcons[index]);       
                }
                catch (IOException ex) {
                    Logger.getLogger(ImageFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Thread inserImage = new Thread(){
                    @Override
                    public void run() {
                        for(int i=1;i<files.length-1;i++){
                            try{
                                BufferedImage image2 = ImageIO.read(files[i]);
                                Image updateImge2 = image2.getScaledInstance(imageLbl.getWidth(), imageLbl.getHeight(), image2.SCALE_SMOOTH);
                                imageIcons[i] = new ImageIcon(updateImge2);
                            } 
                            catch (IOException ex) {
                                Logger.getLogger(ImageFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    
                };
                inserImage.start();
                }
            }
        }
        
        /*
        JFileChooser imageFile = new JFileChooser();
        imageFile.showOpenDialog(imageFile);
        File open = imageFile.getSelectedFile();
        String path = open.getPath();
        pathField.setText(path);
        BufferedImage image = null;
        try{
            image = ImageIO.read(open);
            Image updateImg = image.getScaledInstance(imageLbl.getWidth(), imageLbl.getHeight(), image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(updateImg);
            imageLbl.setIcon(imageIcon);
        } 
        catch (IOException ex) {
            Logger.getLogger(ImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_dotsBtnActionPerformed

    private void pathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_pathFieldActionPerformed

    private void lastImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastImageActionPerformed
        // TODO add your handling code here:
        if(files.length > 0){
        index = files.length-1;
        String path = files[index].getPath();
        pathField.setText(path);
            try{
                BufferedImage lastImage = ImageIO.read(files[index]);
                Image updateImge2 = lastImage.getScaledInstance(imageLbl.getWidth(), imageLbl.getHeight(), lastImage.SCALE_SMOOTH);
                imageIcons[index] = new ImageIcon(updateImge2);
                imageLbl.setIcon(imageIcons[index]);
            } 
            catch (IOException ex) {
                    Logger.getLogger(ImageFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lastImageActionPerformed

    private void firstImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstImageActionPerformed
        // TODO add your handling code here:
        if(files.length > 0){
        index=0;
        String path = files[index].getPath();
        pathField.setText(path);
        
        imageLbl.setIcon(imageIcons[index]);
        }
    }//GEN-LAST:event_firstImageActionPerformed

    private void nextImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextImageActionPerformed
        // TODO add your handling code here:
        if(files.length > 0){
            index++;
            if(index<files.length && index >=0){
                String path = files[index].getPath();
                pathField.setText(path);
            
                imageLbl.setIcon(imageIcons[index]);
            }
            else{
                index--;
            }
        }
    }//GEN-LAST:event_nextImageActionPerformed

    private void previousImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousImageActionPerformed
        // TODO add your handling code here:
        if(files.length > 0){
            index--;
            if(index>=0 && index<files.length){
            String path = files[index].getPath();
            pathField.setText(path);
            
            imageLbl.setIcon(imageIcons[index]);
            }
            else{
                index++;
            }
        }
    }//GEN-LAST:event_previousImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageFrame().setVisible(true);
            }
        });
    }
    private File folder;
    private File[] files;
    private int fileCount;
    private int index;
    private ImageIcon imageIcon2;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dotsBtn;
    private javax.swing.JButton firstImage;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JButton lastImage;
    private javax.swing.JButton nextImage;
    private javax.swing.JTextField pathField;
    private javax.swing.JButton previousImage;
    // End of variables declaration//GEN-END:variables
}
